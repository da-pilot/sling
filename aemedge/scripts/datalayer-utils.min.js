(function () {
  console.log('[DataLayer-Utils] Starting data layer initialization'); if (window.adobeDataLayer && window.adobeDataLayer.version) { console.warn('[DataLayer-Utils] Adobe Client Data Layer already loaded'); return; }console.log('[DataLayer-Utils] Initializing Adobe Data Layer'); window.adobeDataLayer = window.adobeDataLayer || []; async function updateAppName(timeoutMs = 1000, pollIntervalMs = 100, setupListener = true) { const checkAndUpdate = () => { if (window.adobeDataLayer && Array.isArray(window.adobeDataLayer)) { let updated = false; window.adobeDataLayer.forEach((item) => { if (item?.web?.webPageDetails) { const slingData = item.web.webPageDetails._sling; if (slingData) { if (slingData.appName) { const currentAppName = slingData.appName; if (!currentAppName.includes('eds')) { slingData.appName = `eds-${currentAppName}`; updated = true; console.log(`[DataLayer] Updated appName: "${currentAppName}" â†’ "${slingData.appName}"`); } } else { slingData.appName = 'eds-marketing-site'; updated = true; console.log('[DataLayer] Set default appName: "eds-marketing-site"'); } } } }); return { found: true, updated }; } return { found: false, updated: false }; }; const setupDataLayerListener = () => { if (window.adobeDataLayer) { const listenerFlag = '_edsListenerSetup'; if (!window.adobeDataLayer[listenerFlag]) { window.adobeDataLayer[listenerFlag] = true; window.adobeDataLayer.addEventListener('adobeDataLayer:change', () => { setTimeout(() => { checkAndUpdate(); }, 50); }); setInterval(() => { checkAndUpdate(); }, 5000); console.log('[DataLayer] Listener established for ongoing appName updates'); } } }; const immediateResult = checkAndUpdate(); if (immediateResult.found) { if (setupListener) { setupDataLayerListener(); } return immediateResult.updated; } return new Promise((resolve) => { const startTime = Date.now(); const pollInterval = setInterval(() => { const result = checkAndUpdate(); if (result.found) { clearInterval(pollInterval); if (setupListener) { setupDataLayerListener(); }resolve(result.updated); return; } if (Date.now() - startTime >= timeoutMs) { clearInterval(pollInterval); console.warn('[DataLayer] AppName update timed out after', timeoutMs, 'ms'); resolve(false); } }, pollIntervalMs); }); } function initializeDataLayer(options) { const dataLayer = options?.dataLayer || []; dataLayer.version = '2.0.2'; dataLayer.getState = function (path) { const state = this._state || {}; return path ? state[path] : { ...state }; }; dataLayer.addEventListener = function (event, handler, listenerOptions) { this._listeners = this._listeners || {}; this._listeners[event] = this._listeners[event] || []; this._listeners[event].push({ handler, options: listenerOptions }); }; const originalPush = dataLayer.push; dataLayer.push = function (data) { this._state = this._state || {}; if (data && typeof data === 'object' && !data.event) { Object.assign(this._state, data); } return originalPush.call(this, data); }; return dataLayer; } const DataLayerHelpers = {
    pushDebugData(appName) { const data = { web: { webPageDetails: { platform: 'web', _sling: { appName, analyticsVersion: '7.0.39' } } } }; window.adobeDataLayer.push(data); },
    pushPageData(pageInfo = {}) {
      const {
        name = window.location.pathname, lineOfBusiness = 'domestic', classification = 'us', type = 'generic', lang = 'en', domain = window.location.hostname, siteSection = lineOfBusiness, siteSubSection = classification, qsp = '', isErrorPage = false,
      } = pageInfo; const data = {
        web: {
          webPageDetails: {
            name, type, qsp, language: lang, siteSection, siteSubSection, domain, isErrorPage, _sling: { lineOfBusiness, classification, domain },
          },
        },
      }; window.adobeDataLayer.push(data);
    },
    pushCartData(cartInfo = {}) {
      const {
        category = 'acquisition', subCategory = 'simple-shop', referrer = 'unknown', planName = 'monthly', offerName = '', deviceBundle = '', subType = 'paid', basePreselect = [], extrasPreselect = [],
      } = cartInfo; const packagePreselect = [...basePreselect, ...extrasPreselect]; const formattedPackagePreselect = packagePreselect.join('|'); const data = {
        commerce: {
          cart: {
            _sling: {
              category, subCategory, referrer, planName, offerName, deviceBundle, subType, basePreselect, extrasPreselect, packagePreselect, formattedPackagePreselect,
            },
          },
        },
      }; window.adobeDataLayer.push(data);
    },
    pushCartStep(stepName = 'account') { const eventName = `cart_step_${stepName}`; const data = { event: eventName, web: { currentEvent: eventName } }; window.adobeDataLayer.push(data); },
    updatePageType(type = 'cart') { const currentPathname = window.location.pathname; const data = { web: { webPageDetails: { name: currentPathname, type } } }; window.adobeDataLayer.push(data); },
    pushScreenLoad(pageData = {}) { this.pushPageData(pageData); const data = { event: 'screen_load', screenLoadFired: true, web: { currentEvent: 'screen_load' } }; window.adobeDataLayer.push(data); },
    pushStepEvent(stepName, eventData = {}) { const validSteps = { cancelStart: 'cancel_start', screenLoad: 'screen_load' }; if (!validSteps[stepName]) { console.warn(`[DataLayer] Event "${stepName}" is not a valid event`); return; } this.pushPageData(eventData); const eventName = validSteps[stepName]; const data = { event: eventName, web: { currentEvent: eventName } }; window.adobeDataLayer.push(data); },
    getPageData() { const { pathname } = window.location; const isHomePage = pathname === '/'; const data = { name: isHomePage ? 'home' : pathname }; if (isHomePage) { data.type = 'home'; data.lineOfBusiness = 'domestic'; data.classification = 'us'; } else { const firstDir = pathname.split('/')[1]; if (firstDir.includes('account')) { data.type = 'account'; } else if (firstDir.includes('latino')) { data.lineOfBusiness = 'latino'; } else if (firstDir.includes('whatson')) { data.type = 'blog'; } else if (firstDir.includes('help')) { data.type = 'help'; } else if (firstDir.includes('international')) { data.lineOfBusiness = 'international'; } else { data.lineOfBusiness = 'domestic'; }data.classification = 'us'; } return data; },
  }; initializeDataLayer({ dataLayer: window.adobeDataLayer }); setTimeout(async () => { console.log('[DataLayer-Utils] Auto-initializing data layer'); const appName = 'eds-marketing-site'; const pageData = DataLayerHelpers.getPageData(); const skipAnalytics = !!document.querySelector('.skipAnalytics'); const cancelStep = document.querySelector('meta[name="cancel-step"]')?.content || 'screen_load'; console.log('[DataLayer-Utils] Pushing initial debug data with appName:', appName); DataLayerHelpers.pushDebugData(appName); console.log('[DataLayer-Utils] Updating appName in data layer'); try { await updateAppName(); } catch (error) { console.warn('[DataLayer-Utils] Failed to update appName:', error); } if (!skipAnalytics) { const isCartPage = window.location.pathname.includes('/cart') || document.querySelector('.account-form, .package-cards'); if (isCartPage) { DataLayerHelpers.pushCartData(); DataLayerHelpers.pushCartStep('account'); DataLayerHelpers.updatePageType('cart'); } if (cancelStep !== 'screen_load') { console.log('[DataLayer] STEP EVENT'); DataLayerHelpers.pushStepEvent(cancelStep, pageData); } else { console.log('[DataLayer] SCREEN LOAD EVENT'); DataLayerHelpers.pushScreenLoad(pageData); } } }, 0); window.SlingDataLayer = { updateAppName, helpers: DataLayerHelpers, initialize: initializeDataLayer };
}());